{
    "destructuring of props": {
        "prefix": "dp",
        "body": ["const { ${1:name} } = this.props"]
    },
    "destructuring of state": {
        "prefix": "ds",
        "body": ["const { ${1:name} } = this.state"]
    },
    "useState": {
        "prefix": "us",
        "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})$0",
        "description": "React useState() hook"
    },
    "useEffect": {
        "prefix": "ue",
        "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
        "description": "React useEffect() hook"
    },
    "useEffect with cleanup": {
        "prefix": "uec",
        "body": [
            "useEffect(() => {",
            "\t$1",
            "\n\treturn () => {",
            "\t\t$2",
            "\t}",
            "}, [${3:dependencies}])$0"
        ],
        "description": "React useEffect() hook with a cleanup function"
    },
    "useCallback": {
        "prefix": "ucb",
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ")$0"
        ],
        "description": "React useCallback() hook"
    },
    "useMemo": {
        "prefix": "ume",
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
        ],
        "description": "React useMemo() hook"
    }
}
